[
  {
    "2012-11-30-max-device-width": {
      "layout": "post",
      "title": "Modifying 'max-device-width' with Javascript",
      "description": "Changing CSS media queries on the client side.",
      "category": "words",
      "tags": [
        "development",
        "javascript",
        "media queries",
        "responsive"
      ],
      "__content": "\n\nI recently had the requirement to swap out all occurrences of the CSS media query ``max-device-width`` with ``max-width`` in Javascript. I wasn't able to find any resources on how to go about this, so this may be of use for anyone needing to modify media queries on the client side. \n\n### Why would you need to mess with 'max-device-width'?\n\nMy scenario was needing to give an indication of how HTML email content would display on mobile devices. Using IFrame-based tests (e.g. [Matt Kersley's Responsive Design Tests](http://mattkersley.com/responsive/)) worked well in most instances, but many responsive email designs use CSS media queries that included ``max-device-width``. As my IFrames were being viewed on desktop devices with high resolution displays these rules were not being triggered. As it isn't possible to fake ``max-device-width`` the only alternative was switch it for ``max-width``.\n\n### Getting hold of the media queries\n\nFirst we need to get hold of all the stylesheets that the document has loaded and loop through each of them. In turn, we need to loop through every CSS rule and check if any have their type property set to [4 (MEDIA_RULE)](https://developer.mozilla.org/en-US/docs/DOM/cssRule). This is shown in this function, which returns an array of all the media rules found:\n\n``` javascript\nfunction getCSSMediaRules(doc) {\n\tvar stylesheets = doc.styleSheets;\n\tvar mediaRules = new Array();\n\t\t\t\n\t// loop through all CSS files\n\tfor (var i in stylesheets) {\n\t\tif (stylesheets.hasOwnProperty(i)) {\n\t\t\tvar stylesheets = stylesheets[i];\n\t\t\tvar stylesheetRules = stylesheets.cssRules;\n\t\t\t// for every CSS file, loop through all CSS rules\n\t\t\tfor (var i in stylesheetRules) {\n\t\t\t\tif (stylesheetRules.hasOwnProperty(i)) {\n\t\t\t\t\tvar stylesheetRule = stylesheetRules[i];\n\t\t\t\t\t// check CSS rule is a type 4 'MEDIA_RULE'\n\t\t\t\t\tif (stylesheetRule.type == 4) {\n\t\t\t\t\t        mediaRules.push(stylesheetRule);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\t  \t\n\treturn mediaRules;\n}\n```\n\n### Editing media queries\n\nThe DOM only provides methods to add and remove CSS media rules. In my instance I needed to preserve the width value, so removing and adding wasn't an option. Instead I found editing the rule's ``mediaText`` property had the desired effect:  \n\n``` javascript\t\t\nfunction replaceMaxDeviceWidth(rule) {\n\trule.media.mediaText = rule.media.mediaText.replace('max-device-width', 'max-width');\n}\n```\n\n### console.debug(everythingAllTheTime)\n\nMany of the properties such as ``mediaText`` have pretty sparse documentation so it's sometimes easier to debug the rules and mess with them in the console.",
      "preview": "I recently had the requirement to swap out all occurrences …",
      "basename": "2012-11-30-max-device-width"
    },
    "2013-01-04-formdata-ie10": {
      "layout": "post",
      "title": "FormData only works in IE10 if you append name/value pairs",
      "description": "Passing a form element to the FormData object in Internet Explorer 10.",
      "category": "words",
      "tags": [
        "development",
        "javascript",
        "internet explorer",
        "formdata"
      ],
      "__content": "\n\nI've recently been working with the XHR [FormData](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/FormData) object to build an upload management tool. When testing in IE10 (which supports FormData) I ran into a bizarre error (\"SCRIPT5 'Access Denied\") on this line:\n\n``` javascript\nvar upload_form = new FormData(form);\n```\n\nA rather useful [Stack Overflow discussion](http://stackoverflow.com/questions/13123537/formdata-of-existing-form-fails-in-ie10-by-triggering-via-js) suggested appending the data. Indeed Microsoft's [MSDN article](http://msdn.microsoft.com/en-us/library/ie/hh772723%28v=vs.85%29.aspx) doesn't seem to mention the element ('form' in my example) argument for FormData that other modern browsers support.\n\n### Appending lots of things \n\nThe Stack Overflow method works well for appending multiple files from one file input, but I had the requirement of submitting quite a bit of form data (text inputs and checkboxes) with the files… all at the same time. For this I needed to automate the appending, for which I used MooTools' [Element.toQueryString()](http://mootools.net/docs/core/Element/Element#Element:toQueryString) and [String.parseQueryString()](http://mootools.net/docs/more/Types/String.QueryString#String:parseQueryString) methods:\n\n``` javascript\ntry {\n\t// other modern browsers\n\tvar upload_form = new FormData(form);\n} catch(e) {\n\t// IE10 MUST have all form items appended as individual form key / value pairs\n\tvar upload_form = new FormData();\n\tvar form_serialise = form.toQueryString().parseQueryString();\n\t\tObject.each(form_serialise, function(item, key) {\n\t\t\tupload_form.append(key, item);\n\t\t});\n}\n```",
      "preview": "I've recently been working with the XHR …",
      "basename": "2013-01-04-formdata-ie10"
    },
    "2013-03-10-brand-paradox": {
      "layout": "post",
      "title": "Brand personality paradox",
      "description": "Organisations, markets, people and personalities are not one-dimensional... why should a brand strategy be worded in one-dimensional keywords?",
      "category": "words",
      "tags": [
        "branding"
      ],
      "__content": "\n\nI came across [Tom Dorresteijn](http://studiodumbar.com)'s concept of using \"the power of paradox\" to bring brand personality to life when starting work on an internal rebranding project last year:\n\n> \"...organisations are not one-dimensional, markets are not one-dimensional, people and personalities are not one-dimensional. So: why should a brand strategy be worded in one-dimensional keywords? Why is it that three or four keywords should stand for the eternal truth about the brand?\" <a href=\"#creating_brand_personality\">[1]</a>\n\nThis made a lot of sense to me - I felt the brand personality section (using single keywords) of the project I was working on quite limited:\n\n* The list of keywords could have applied to a multitude of companies, with totally different brand personalities.\n* Single words have broad meanings and are too open to interpretation (brand personality could loose direction)\n\nDorresteijn's example showed how this could be avoided:\n\n> \"Right now I am involved in the strategic development of a European brand. One of the keywords of the brand strategy is 'innovative'. This word is meaningful and meaningless at the same time. After reading and talking about the project we defined the paradox 'innovative - mainstream' to replace the singleminded 'innovative'. And then you feel energy: a brand that should be innovative and mainstream. That is much more like real life, much more exiting, much more strength and power. And: much easier to conduct creative reviews in developing the brand and to organise internal governance once the brand is on the market. I can tell you from experience.\" <a href=\"\">[1]</a>\n\nAfter switching over to (sort of) paradoxical pairs (for the aforementioned project's brand personality), we noticed how useful this system was when the agency we were working with reformatted the words into a list of single words. They then became the \"meaningful and meaningless\" words Dorresteijn talked about - the brand personality now lacked clarity. The new list didn't seem authentic or unique - it read like business spiel. Somehow the tension between the two paradoxical words does create an energy that is missing from the list of single words. \n\n<p class=\"has-pullquote\" data-pullquote=\"I concur with Dorresteijn's view that using paradoxes make creative reviews much easier when developing brands\">Now further into the project, I can concur with Dorresteijn's view that using paradoxes make creative reviews much easier when developing the brand. When reviewing copy and visual work we often found ourselves returning the paradoxical pairs, checking the work represented the paradoxical pairs as a fused word (e.g. technical - helpful).  If an element of the work didn't fit the brand personality it would often be the case it was overbalanced in one direction, for example the work could be too \"technical\" and not \"helpful\" enough. </p>\n\n[1] <a href=\"http://web.archive.org/web/20120919194116/http://visual-branding.com/eight-outlines/creating-a-brand-personality/\" id=\"creating_brand_personality\">Creating a Brand Personality (from Internet Archive)</a>",
      "preview": "I came across [Tom Dorresteijn](http://studiodumbar.com)'s …",
      "basename": "2013-03-10-brand-paradox"
    },
    "2013-07-24-floating-tables-outlook": {
      "layout": "post",
      "title": "Getting tables to float in Outlook 2007 - 2013&#58; a Checklist",
      "description": "A debugging checklist for when Outlook decides it won't float your tables in responsive email designs.",
      "category": "words",
      "tags": [
        "email design",
        "outlook",
        "responsive",
        "microsoft ruining my life"
      ],
      "__content": "\n\nWhen designing responsive email templates it's a common requirement to \"float\" two items next to each other. The process of aligning tables left or right to simulate floating elements is described in [this Email on Acid blog post](http://www.emailonacid.com/blog/details/C13/removing_unwanted_spacing_or_gaps_between_tables_in_outlook_2007_2010).\n\n<p class=\"has-pullquote\" data-pullquote=\"as the template grows in complexity things end up causing Outlook to not float them\">I've found that easy to follow for simple designs, but as the template gets edited over time and grows in complexity things end up throwing out the tables and causing Outlook to not float them. In order to debug these issues I've found the following checklist useful:</p>\n\n### 1. Parent table of floated tables must have a width set \n\n``` html\n<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"480\">\n```\n\t\n### 2. Floated tables must have: \n\n- style attributes `mso-table-rspace: 0pt; mso-table-lspace: 0pt; border-collapse: collapse;`\n- a width set (reduce every other table by one pixel to allow for the `mso-border-right-alt` in step 3).\n- align=\"left\".\n\n``` html\n<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"mso-table-rspace: 0pt; mso-table-lspace: 0pt; border-collapse: collapse;\" width=\"239\" align=\"left\">\n```\n\n### 3. Floated tables should only have one child &lt;td&gt;, which has a 'mso-border-right-alt' applied to it \n\n``` html\n<td style=\"border: none; mso-border-right-alt: solid #FFFFFF .5pt; border-collapse: collapse;\">\n```\n\n4. All the content in the child &lt;td&gt; is wrapped in a `<div>` with more Outlook specific styles.\n\n``` html\t\n<div style=\"mso-table-lspace: 0; mso-table-rspace: 0;\">\n```\t\n\t\n## Altogether....\n\nNote that the 1st floated table is 239px wide - to allow for the `mso-border-right-alt` applied to the child &lt;td&gt;s\n\n``` html\n<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"480\">\n\t<tr>\n\t\t<td>\n\t\t\t<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"mso-table-rspace: 0pt; mso-table-lspace: 0pt; border-collapse: collapse;\" width=\"239\" align=\"left\"  bgcolor=\"#CCCCCC\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td style=\"mso-border-right-alt: solid #FFFFFF .5pt;\">\n\t\t\t\t\t\t<div style=\"mso-table-lspace: 0; mso-table-rspace: 0;\">Left content</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t\t<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"mso-table-rspace: 0pt; mso-table-lspace: 0pt; border-collapse: collapse;\" width=\"240\" align=\"left\"  bgcolor=\"#999999\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td style=\"mso-border-right-alt: solid #FFFFFF .5pt;\">\n\t\t\t\t\t\t<div style=\"mso-table-lspace: 0; mso-table-rspace: 0;\">Right content</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t</td>\n\t</tr>\n</table>\n```\n\n\n",
      "preview": "When designing responsive email templates it's a common …",
      "basename": "2013-07-24-floating-tables-outlook"
    },
    "2014-01-21-grunt-for-email-templates": {
      "layout": "post",
      "title": "Using Grunt to build email templates",
      "description": "Take the pain out of building email templates using Grunt Email Boilerplate.",
      "category": "words",
      "tags": [
        "development",
        "email design",
        "javascript"
      ],
      "__content": "\n\nTake the pain out of building email templates using [Grunt Email Boilerplate](https://github.com/dwightjack/grunt-email-boilerplate).\n\n### Why?\n\n#### 1. Simple email templates often require complex/messy HTML\n Markup for Email templates can get complex and messy, making debugging and adjusting templates painful. Often regions are shared between different templates (e.g. header and footer), or areas are repeated in the same email (e.g. a product item or news article layout).\n\n *Couldn't templating help reduce the complexity of layouts and support DRY (don't repeat yourself)?*\n\n#### 2. Simple email templates often require complex CSS\nEmail templates require a mixture of inline and embedded CSS. Using an method of inlining styles, such as [Premailer](https://github.com/premailer/premailer), is pretty much essential for keeping your HTML files clean. CSS pre-processors, such as SASS, can also help speed up development time. If we want to look at templating out sections of the email (suggested above) SASS helps us keep our CSS modular in separate files. Previously I would run `sass watch`, then run Premailer when the email was built / every time a template needing updating. \n\n*Couldn't this workflow be better automated?*\n\n#### 3. Testing email templates can be time consuming\nPreviously, I would build a template then upload it to an email platform from which I'd send out test emails to myself and [Litmus](https://litmus.com). I'd then make adjustments, upload, send tests... adjustments, upload, send tests, adjustments, upload send tests... you get the picture. \n\n*Couldn't we speed up this process?*\n\n#### 4. Manually updating email templates is often a dull, repetitive and painful task\nWhile some email templates are hooked up to CMS/ecommerce solutions that populate email templates, this level of integration isn't always feasible for some people. Updating a typical product/sales email template each month might involve updating the product name, product price, product URL and product image (resized, optimised and re-uploaded) for each product in the email - a dull, time-consuming task. Doing this task through a WYSIWYG editor commonly found in email platforms is prone to breaking layouts (editing wrong regions or incorrectly sized images). \n\n*Couldn't this task be automated? And couldn't we better protect the layout from mistakes?*\n\n### Grunt Email Boilerplate to the rescue!\n[Grunt Email Boilerplate](https://github.com/dwightjack/grunt-email-boilerplate) is a vanilla email template that takes advantage of task-runner [Grunt](http://gruntjs.com) and it's many plugins/tasks. Out of the box it: \n\n* Provides templating via EJS\n* Watches and builds your SASS\n* Runs your content through Premailer\n* Optimises images \n* Optionally, sends the email via Nodemailer\n\n...which solves most of our problems outlined above:\n\n1. We can use EJS templating to separate out header/footer elements and share between different email templates. We can also use EJS to iterate through JSON arrays of content, populating our HTML templates. For example, in a recent product email template I used [this JSON file](https://github.com/jonjhiggins/clubline-emails/blob/9891fa2e5163289a9edec5db87513dfe06b31df0/src/data/data.json) to populate the products section - only requiring me to write the HTML for one product.\n\n2. SASS/Compass and Premailer are run every time the content is changed, two less things to think about so you can concentrate on building your template.\n\n3. Nodemailer allows you to send yourself or others versions of the emails for testing. I didn't explore this option until after I'd built my most recent email template, so currently there's no images in the emails it sends on my setup. But I'm sure with a bit of digging that can be sorted. Support for Litmus [appears to be on its way](https://github.com/dwightjack/grunt-email-boilerplate/issues/8).\n\n4. Using EJS templating to iterate through arrays of data is really powerful. For me, the JSON file containing email content is easy to edit manually if elements of the email change. However, as the file is JSON you can see how this process could easily be hooked up to a UI for less technical users or integrated into a back-office system that spits out JSON.\n\n## In summary\n\nWhile template building and testing can be painful, Grunt Email Boilerplate does a great job of speeding up development right out of the box. It's also straightforward to customise to fit your requirements.\n\nThe next time you're building email templates I suggest you check out [Grunt Email Boilerplate](https://github.com/dwightjack/grunt-email-boilerplate). You can also [check out the source of a HTML template](https://github.com/jonjhiggins/clubline-emails) I built using Grunt Email Boilerplate - including customisations I've made to the workflow.\n\n",
      "preview": "Take the pain out of building email templates using [Grunt …",
      "basename": "2014-01-21-grunt-for-email-templates"
    },
    "2015-03-20-animated-rotating-cursor-over-carousel": {
      "layout": "post",
      "title": "Animated rotating cursor over carousel",
      "description": "Apply CSS3 transforms, transitions and animations to cursors.",
      "category": "words",
      "tags": [
        "development",
        "css",
        "javascript"
      ],
      "__content": "\n\nApply CSS3 transforms, transitions and animations to cursors.\n\n### Why\n\nIn order to slide forwards or backwards in carousels, a common design pattern is to use arrow buttons either side of the carousel, overlaying the carousel content.\n\n<p class=\"has-pullquote\" data-pullquote=\"Making the clickable area larger and reducing the distance the user needs to travel keeps in mind Fitt's Law\"> However, these buttons can encroach on content and add clutter. To avoid these issues we could:</p>\n\n* **Make whole carousel clickable** - clicking on left portion will page user back one slide, clicking the right portion will page user forward one slide. Making the clickable area larger and reducing the distance the user needs to travel keeps in mind [Fitt's Law](http://en.wikipedia.org/wiki/Fitts%27s_law).\n* **Switch the users cursor over to an arrow** the arrow will indicate the direction the carousel will slide in when the user clicks. This takes up less room than two permanent arrows.\n\n\n\nNote that this effect will only be seen on desktop - there's no cursor on touch devices. As space is usually limited on touch devices we could look at adding arrow buttons in below the content.\n\n\n\n### How\nNow that we have a UX justification for this design pattern we need to look at a clean and reliable frontend implementation.\n\n### 1. Setup parent layout: add a carousel, with mousemove and click events. \n\nMousemove checks if the cursor is in the left or right portion of the carousel, and adds a \"left\" or \"right\" class accordingly. Click event checks if the target is a link (either within the content or carousel pagination), if not it will page to next or previous slide, depending on whether the cursor is in the left or right portion of the carousel.\n\n<p data-height=\"432\" data-theme-id=\"0\" data-slug-hash=\"pvxYYa\" data-default-tab=\"result\" data-user=\"jonjhiggins\" class='codepen'>See the Pen <a href='http://codepen.io/jonjhiggins/pen/pvxYYa/'>pvxYYa</a> by Jon Higgins (<a href='http://codepen.io/jonjhiggins'>@jonjhiggins</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n### 2. Replace cursor with div, apply transforms\n\nTo enhance carousel interactions, we can transition the cursor when switching from left to right. CSS transforms can't be applied to cursors, so we will have to replace our cursor with a `<div>` that can be styled as a cursor. In the next Codepen we set up mousemove event listeners that move the `.cursor` `<div>` in place of the browser's cursor and add a rotation transition. It's important to note we are using CSS transforms to move the cursor (rather than \"left\" / \"top\" properties) for performance as these don't [trigger a repaint/composite](http://csstriggers.com/).\n\n<p data-height=\"461\" data-theme-id=\"0\" data-slug-hash=\"KwJYZq\" data-default-tab=\"result\" data-user=\"jonjhiggins\" class='codepen'>See the Pen <a href='http://codepen.io/jonjhiggins/pen/KwJYZq/'>KwJYZq</a> by Jon Higgins (<a href='http://codepen.io/jonjhiggins'>@jonjhiggins</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n### 3. Make sure buttons still show pointer\n\nThe only issue with the above example is that the pointer button does not show when we hover over the CTA button or the carousel navigation. To get around this we can add mouseenter/mouseleave events to elements we want to show the pointer when hovering (e.g. `<a>`, `<button>`). We also need to add `pointer-events: none` to `.cursor`'s CSS. This prevents the `.cursor` element getting in the way of browser's cursor when hovering `<a>` tags and `<buttons>`.\n\n<p data-height=\"436\" data-theme-id=\"0\" data-slug-hash=\"LEqKKr\" data-default-tab=\"result\" data-user=\"jonjhiggins\" class='codepen'>See the Pen <a href='http://codepen.io/jonjhiggins/pen/LEqKKr/'>LEqKKr</a> by Jon Higgins (<a href='http://codepen.io/jonjhiggins'>@jonjhiggins</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n### Bonus! Try different transitions and animations\n\nInteractions contribute to the character of a website. Think carefully about which is the best fit for your project.\n\n<p data-height=\"131\" data-theme-id=\"0\" data-slug-hash=\"ByMXWo\" data-default-tab=\"result\" data-user=\"jonjhiggins\" class='codepen'>See the Pen <a href='http://codepen.io/jonjhiggins/pen/ByMXWo/'>ByMXWo</a> by Jon Higgins (<a href='http://codepen.io/jonjhiggins'>@jonjhiggins</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n",
      "preview": "Apply CSS3 transforms, transitions and animations to …",
      "basename": "2015-03-20-animated-rotating-cursor-over-carousel"
    }
  }
]
